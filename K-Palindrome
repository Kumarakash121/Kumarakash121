K-Palindrome
EasyAccuracy: 55.76%Submissions: 3518Points: 2
Given a string str of length n, find if the string is K-Palindrome or not. A k-palindrome string transforms into a palindrome on removing at most k characters from 
it.


Example 1:

Input: str = "abcdecba"
n = 8, k = 1
Output: 1
Explaination: By removing 'd' or 'e' 
we can make it a palindrome.



if the diffrence between length of lcs and length of original string <=k then return true else false
because in lcs we make minimum no of deletion to make lcs 
minimum number of deletion to make longest palindromic subsequence we find longest common subsequence of string and reverse of string



int kPalindrome(string str, int n, int k)
    {
        // code here
        
        string rev="";
        // rev=reverse(rev.begin(),rev.end());
        for(int i=n-1;i>=0;i--){
            rev+=str[i];
        }
        int dp[n+1][n+1];
        memset(dp,-1,sizeof(dp));
        for(int i=0;i<n+1;i++){
            for(int j=0;j<n+1;j++){
                dp[i][j]=0;
            }
        }
        for(int i=1;i<n+1;i++){
            for(int j=1;j<n+1;j++){
                if(str[i-1]==rev[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
       int p= (str.size()-dp[n][n])<=k?1:0;
      return p; 
    }

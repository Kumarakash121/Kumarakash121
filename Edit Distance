int dp[1001][1001];
  int edit(string s,string t,int n,int m){
      if(n==0){
          return m;
      }
      if(m==0){
          return n;
          
      }
      if(dp[n][m]!=-1){
          return dp[n][m];
      }
  if(s[n-1]==t[m-1]){
      return dp[n][m]= edit(s,t,n-1,m-1);
  }
  
  return dp[n][m]=1+min(edit(s,t,n-1,m),min(edit(s,t,n-1,m-1),edit(s,t,n,m-1)));
      
  }
    int editDistance(string s, string t) {
        // Code here
        memset(dp,-1,sizeof(dp));
        int ans=edit(s,t,s.length(),t.length());
        return ans;
    }
    
    
    
    int dp[1001][1001];
  int edit(string s,string t){
     for(int i=0;i<=s.length();i++){
         for(int j=0;j<=t.length();j++){
             
             if(i==0){
                 dp[i][j]=j;
             }
             else if(j==0){
                 dp[i][j]=i;
             }
             else{
                 
                 if(s[i-1]==t[j-1]){
                     dp[i][j]=dp[i-1][j-1];
                 }
                 else{
                     dp[i][j]=1+min(dp[i-1][j],min(dp[i-1][j-1],dp[i][j-1]));
                 }
             }
         }
     }
     return dp[s.length()][t.length()];
  }
    int editDistance(string s, string t) {
        // Code here
        // memset(dp,-1,sizeof(dp));
        int ans=edit(s,t);
        return ans;
    }
    
    
    Expected Time Complexity: O(|s|*|t|)
Expected Space Complexity: O(|s|*|t|)


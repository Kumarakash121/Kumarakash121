int findLongestConseqSubseq(int arr[], int N)
    {
      //Your code here
      set<int>m;
      
      for(int i=0;i<N;i++){
          
          m.insert(arr[i]);
          
      }
    //   int cnt=0;
    int maxsum=0;
      for(int i=0;i<N;i++){
          
          if(!m.count(arr[i]-1)){
             
             int curr=1;
             int num=arr[i];
             
             while(m.count(num+1)){
                 
                 curr+=1;
                 num+=1;
                 
             }
             maxsum=max(maxsum,curr);
          }
      }
      return maxsum;
    }
    
    
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

✔️ Solution - III (Using Hashset - w/ optimizations)

We can form a solution without the need to spend time erasing elements from the hashset.

Instead of taking the first element that we find in the hashset and iterating both forward and backward, we can just keep skipping till we find that hashset contains num - 1. Finally, we can just iterate in the forward direction till we find consecutive elements in hashset and update longest at the end

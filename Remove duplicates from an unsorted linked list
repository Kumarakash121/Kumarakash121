Given an unsorted linked list of N nodes. The task is to remove duplicate elements from this unsorted Linked List. When a value appears in multiple nodes, the node which appeared first should be kept, all others duplicates are to be removed.

Example 1:

Input:
N = 4
value[] = {5,2,2,4}
Output: 5 2 4
Explanation:Given linked list elements are
5->2->2->4, in which 2 is repeated only.
So, we will delete the extra repeated
elements 2 from the linked list and the
resultant linked list will contain 5->2->4



Follow the below steps to Implement the idea:

Create a Unordered set to keep a track of the visited elements.
Traverse the linked list from head to end node 
If current node is already present in the Hashset. Then delete the current node. 
Else move insert the node in the Hashset and move to the next node.
Return 



Node * removeDuplicates( Node *head) 
    {
     // your code goes here
     unordered_set<int>s;
     
     Node* curr=head;
     Node* prev=NULL;
     
     while(curr!=NULL){
         
         if(s.find(curr->data)!=s.end()){
             prev->next=curr->next;
             delete(curr);
             
         }
         else{
             s.insert(curr->data);
             prev=curr;
         }
         curr=prev->next;
     }
     
     return head;
    }
    
    
    Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

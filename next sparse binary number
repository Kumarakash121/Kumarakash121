int nextSparse(int n) {
        // code here
        vector<long long int>v;
        int x=n;
        
        while(n!=0){
            v.push_back(n&1);
            n>>=1;
        }
        v.push_back(0);
        // cout<<v.size()<<endl;
       int lastbit=0;
        for(int i=1;i<v.size();i++){
            if(v[i]==1 && v[i-1]==1&& v[i+1]!=1){
                v[i]=0;
                v[i-1]=0;
                v[i+1]=1;
                
             for(int j=i;j>=lastbit;j--){
                 v[j]=0;
             }
             lastbit=i+1;
             
            }
            
        }
        int ans=0;
        for(int i=0;i<v.size();i++){
            // cout<<v[i]<<" ";
            ans+=(v[i]*(1<<i));
            
        }
        return ans;
    }
    
    
    
    1) Find binary of the given number and store it in a 
   boolean array.
2) Initialize last_finalized bit position as 0.
2) Start traversing the binary from least significant bit.
    a) If we get two adjacent 1's such that next (or third) 
       bit is not 1, then 
          (i)  Make all bits after this 1 to last finalized
               bit (including last finalized) as 0. (to find minimum possible number)
          (ii) Update last finalized bit as next bit.
          
          
          
          
Time complexity of this solution is O(Log x).

Auxiliary Space: O(log x)

int dp[1001][1001];
  
  string longestpalind(string s){
      int start=0;
      int max=1;
      for(int i=0;i<s.length();i++){
          dp[i][i]=1;
      }
      int flag=0;
      for(int i=0;i<s.length()-1;i++){
          if(s[i]==s[i+1]){
              dp[i][i+1]=1;
              if(!flag){
                  start=i;
                  flag=1;
              }
              
              
              max=2;
          }
      }
      for(int k=3;k<=s.length();k++){
          flag=0;
          for(int i=0;i<s.length()-k+1;i++){
              int j=i+k-1;
              if(s[i]==s[j] && dp[i+1][j-1]){
                  dp[i][j]=1;
                 if(k>max){
                     max=k;
                     if(!flag){
                         start=i;
                         flag=1;
                     }
                     
                 }
                  
              }
      }
  }
  return s.substr(start,max);
  }
    string longestPalin (string S) {
        // code here
        
        memset(dp,0,sizeof(dp));
        return longestpalind(S);
        
        
    }
    
    
    
    
    string longestPalin (string S) {
        // code here
        
        memset(dp,0,sizeof(dp));
        int l,r;
        int max=1,cnt=0;
        int start=0;
        for(int i=1;i<S.length();i++){
            l=i-1;
            r=i;
            
            while(l>=0 && r<S.length() && S[l]==S[r]){
                // cnt+=2;
                if(r-l+1>max){
                    max=r-l+1;
                    start=l;
                }
                l-=1;
                r+=1;
            }
            l=i-1;
            r=i+1;
            cnt=1;
            while(l>=0 && r<S.length() && S[l]==S[r]){
                // cnt+=2;
                if(r-l+1>max){
                    max=r-l+1;
                    start=l;
                }
                l-=1;
                r+=1;
            }
            
            
        }
        return S.substr(start,max);
        
        
    }
    
    
    Expected Time Complexity: O(|S|2).
Expected Auxiliary Space: O(1).

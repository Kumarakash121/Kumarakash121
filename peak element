using brute force-
tc-O(n)
sc-O(1)
int peakElement(int arr[], int n)
    {
       // Your code here
       if(n==1 || arr[0]>arr[1]){
           return 0;
       }
      else if(arr[n-1]>arr[n-2]){
          return n-1;
      }
      else{
          for(int i=1;i<=n-2;i++){
              if(arr[i]>arr[i-1] && arr[i]>arr[i+1]){
                  return i;
              }
          }
      }
    }
    
    
    
    using binary search-every independent array has peak element always
    
    
    int peakElement(int arr[], int n)
    {
      
    
    int low=0;
    int high=n-1;
    while(low<=high){
        
        int mid=(low+high)/2;
        if((mid==0 || arr[mid]>=arr[mid-1]) && (mid==n-1 || arr[mid]>=arr[mid+1])){
            return mid;
        }
       
            if(arr[mid-1]>=arr[mid]){
                high=mid-1;
            }
            else if(arr[mid]<=arr[mid+1]){
                low=mid+1;
                
            }
        
    }
    }
    
    Expected Time Complexity: O(log N)
Expected Auxiliary Space: O(1)


Time Complexity: The function does a simple traversal of the tree, so the complexity is O(n). 
Auxiliary Space: O(n), due to the stack space during recursive call.  

void left(Node* root,int &maxlevel,int level,vector<int>&v){
    if(root==NULL){
        return;
    }
    if(maxlevel<level){
        v.push_back(root->data);
        maxlevel=level;
        
    }
    left(root->left,maxlevel,level+1,v);
    left(root->right,maxlevel,level+1,v);
    
}


level order soln-
Time Complexity: O(n), where n is the number of nodes in the binary tree.
vector<int> leftView(Node *root)
{
   // Your code here
//   int maxlevel=0;
   vector<int>v;
   if(root==NULL){
       return v;
       
   }
//   left(root,maxlevel,1,v);
queue<Node*>q;
q.push(root);

while(!q.empty()){
    int sz=q.size();
    for(int i=1;i<=sz;i++){
        Node* temp=q.front();
        q.pop();
        if(i==1){
            v.push_back(temp->data);
        }
        
        if(temp->left){
            q.push(temp->left);
            
        }
        if(temp->right){
            q.push(temp->right);
            
        }
    }
}
   return v;
}

long long int nthMagicNo(int n) { 
        //complete the function here
        
        long long pow=1;
        long long ans=0;
        long long mod=1000000007;
        while(n){
            
            pow=(pow*5)%mod;
            
            if(n&1){
                ans+=pow%mod;
                
            }
            n>>=1;
        }
        
        return ans%mod;
    }
    
    
    If we notice carefully the magic numbers can be represented as 001, 010, 011, 100, 101, 110 etc, where 001 is 0*pow(5,3) + 0*pow(5,2) + 1*pow(5,1). So basically we need to add powers of 5 for each bit set in a given integer n. 
Below is the implementation based on this idea. 
 

Approach : 

Step 1 : declare and assign a number for which you want to find the magic number.

Step 2 : assign a pow = 1, and ans = 0

Step 3 : use while loop to iterate each bit until ends (while n > 0)

Step 4 : inside loop, find last bit using & operation and  keep updating answer and  power as well

Step 5 : Once loop exit return answer


001-1(5) for n=5 (101)
010-2(25)     101 -5^3*1 +5^2*0 +5^1*1=130
011-3(30)


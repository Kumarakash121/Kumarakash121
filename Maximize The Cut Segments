top-down

int maximizeTheCuts(int n, int x, int y, int z)
    {
        //Your code here
        
        int dp[n+1];
        for(int i=0;i<=n;i++){
            dp[i]=-1;
        }
        
        dp[0]=0;
        for(int i=1;i<=n;i++){
            
            if(i-x>=0 && dp[i-x]!=-1){
                dp[i]=max(dp[i],dp[i-x]+1);
            }
             if(i-y>=0 && dp[i-y]!=-1){
                dp[i]=max(dp[i],dp[i-y]+1);
            }
             if(i-z>=0 && dp[i-z]!=-1){
                dp[i]=max(dp[i],dp[i-z]+1);
            }
            
        }
        
        return dp[n]<=0?0:dp[n];
        
    }
    
    Expected Time Complexity : O(N)
Expected Auxiliary Space: O(N)



 int maximize(int n,int x,int y,int z,int *dp){
          if(n==0){
            return 0;
        }
    if(dp[n]!=-1){
        return dp[n];
        
    }
    
    int a=INT_MIN;
    int b=INT_MIN;
    int c=INT_MIN;
    if(n-x>=0 ){
        a= maximize(n-x,x,y,z,dp);
        
    }
     if(n-y>=0 ){
        b= maximize(n-y,x,y,z,dp);
        
    }
     if(n-z>=0 ){
      c=  maximize(n-z,x,y,z,dp);
        
    }
    return dp[n]=1+max(a,max(b,c));
    }
    
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        //Your code here
        
         int dp[n+1];
        for(int i=0;i<=n;i++){
            dp[i]=-1;
        }
        int ans=maximize(n,x,y,z,dp);
        if(ans<0){
            return 0;
        }
        return ans;
       
    }
    
    
      Expected Time Complexity : O(N)
Expected Auxiliary Space: O(N)
    

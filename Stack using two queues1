Stack using two queues
EasyAccuracy: 40.49%Submissions: 100k+Points: 2
Lamp
Geek Week 2022 is LIVE! Click Here to View All the Exciting Offers!  

Implement a Stack using two queues q1 and q2.

Example 1:

Input:
push(2)
push(3)
pop()
push(4)
pop()
Output: 3 4
Explanation:
push(2) the stack will be {2}
push(3) the stack will be {2 3}
pop()   poped element will be 3 the 
        stack will be {2}
push(4) the stack will be {2 4}
pop()   poped element will be 4  




push-
q2.push(x)
q1->q2
q2->q1

pop-
q1.front()




/* The structure of the class is
class QueueStack{
private:
    queue<int> q1;
    queue<int> q2;
public:
    void push(int);
    int pop();
};
 */

//Function to push an element into stack using two queues.
void QueueStack :: push(int x)
{
        // Your Code
        q2.push(x);
        while(!q1.empty()){
            q2.push(q1.front());
            q1.pop();
            
        }
         while(!q2.empty()){
            q1.push(q2.front());
            q2.pop();
            
        }
        
}

//Function to pop an element from stack using two queues. 
int QueueStack :: pop()
{
        // Your Code  
        if(q1.empty()){
            return -1;
        }
        int x=q1.front();
        q1.pop();
        return x;
}


Expected Time Complexity: O(1) for push() and O(N) for pop() (or vice-versa).
Expected Auxiliary Space: O(1) for both push() and pop().



using one queue 

push-
q1.push(x)

pop-

for i=0->q.size-1
q1.push(q1.front())
q1.pop();


q1.front
q1.pop()





/* The structure of the class is
class QueueStack{
private:
    queue<int> q1;
    queue<int> q2;
public:
    void push(int);
    int pop();
};
 */

//Function to push an element into stack using two queues.
void QueueStack :: push(int x)
{
        // Your Code
       q1.push(x);
        
}

//Function to pop an element from stack using two queues. 
int QueueStack :: pop()
{
        // Your Code  
        if(q1.empty()){
            return -1;
        }
        // int x=q1.front();
        // q1.pop();
        
        for(int i=0;i<q1.size()-1;i++){
            q1.push(q1.front());
            q1.pop();
        }
        int x=q1.front();
        q1.pop();
        return x;
}



Expected Time Complexity: O(1) for push() and O(N) for pop() (or vice-versa).
Expected Auxiliary Space: O(1) for both push() and pop().

 Node* merge(Node* a,Node* b){
        
        Node* temp=new Node(0);
        Node* res=temp;
        
        while(a!=NULL && b!=NULL){
            
            if(a->data<b->data){
                temp->bottom=a;
                a=a->bottom;
                temp=temp->bottom;
            }
            else{
                temp->bottom=b;
                b=b->bottom;
                temp=temp->bottom;
            }
        }
        if(a){
            temp->bottom=a;
        }
        if(b){
            temp->bottom=b;
        }
        
        return res->bottom;
    }
Node *flatten(Node *root)
{
   // Your code here
   if(root==NULL || root->next==NULL){
       return root;
   }
   
   root->next=flatten(root->next);
   
   root=merge(root,root->next);
   return root;
}

Time Complexity: O(N*N*M) – where N is the no of nodes in main linked list (reachable using right pointer) and M is the no of node in a single sub linked list (reachable using down pointer). 

Explanation: As we are merging 2 lists at a time,

After adding first 2 lists, time taken will be O(M+M) = O(2M).
Then we will merge another list to above merged list -> time = O(2M + M) = O(3M).
Then we will merge another list -> time = O(3M + M).
We will keep merging lists to previously merged lists until all lists are merged.
Total time taken will be O(2M + 3M + 4M + …. N*M) = (2 + 3 + 4 + … + N)*M
Using arithmetic sum formula: time = O((N*N + N – 2)*M/2)
Above expression is roughly equal to O(N*N*M) for large value of N
Space Complexity: O(N*M) – because of the recursion. The recursive functions will use recursive stack of size equivalent to total number of elements in the lists, which is N*M.


Expected Time Complexity: O(LogN)
Expected Auxiliary Space: O(1)


Efficient Approach: The idea is to use Binary Search, and find the smallest index of 1 in the array. As the array is sorted, binary search can be performed.

Create two variables, l and r, initialize l = 0 and r = n-1 and a variable ans = -1 to store the answer.
Iterate the steps below till l <= r, the lower-bound is less than the upper-bound.
Check if the element at middle index mid = (l+r)/2, is one or not.
If the element is one, then check for the least index of 1 element on the left side of the middle element, i.e. update r = mid â€“ 1 and update ans = mid.
If the element is zero, then check for the least index of 1 element on the right side of the middle element, i.e. update l = mid + 1.


int transitionPoint(int arr[], int n) {
    // code here
    
    
    int low=0;
    int high=n-1;
    while(low<=high){
        
        int mid=(low+high)/2;
        
        if(arr[mid]==0){
            low=mid+1;
        }
        else if(arr[mid]==1){
            high=mid-1;
            
            if(mid==0 || mid>0 && arr[mid-1]==0){
                return mid;
            }
        }
    }
    return -1;
}



int findTransitionPoint(int arr[], int n)
{
    //perform a linear search and
    // return the index of
    //first 1
    for(int i=0; i<n ;i++)
      if(arr[i]==1)
        return i;
 
    //if no element is 1
    return -1;
}

tc=O(n)
sc=O(1)

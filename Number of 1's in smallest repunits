 int repUnit(int N){
        // code here
        int count=1;
        int rem=1;
        while(rem!=0){
            
            rem=(rem*10+1)%N;
            count++;
        }
        return count;
    }
    
    
    The repunits are 1, 11, 111, 1111, …. the next repunit to x will always be x*10+1. If the remainder left by x repunit is r then remainder left by the next repunit will always be (r*10+1)%n. Since the repunit can be very large, there is no need to find the repunit number. Simply counting the number of ones will give us the answer. 
So, find out the remainders of all repunit numbers until the remainder becomes 0. Once it does, then the count of iterations done to make remainder 0 will be the number of 1’s. 

1 11 111
1  2  0 
so 111 is divisible by 3

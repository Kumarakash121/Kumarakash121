int equalPartition(int N, int arr[])
    {
        // code here
        
        
        int sum=0;
        for(int i=0;i<N;i++){
            sum+=arr[i];
            
        }
        
        if(sum&1){
            return false;
        }
        
        bool dp[N+1][sum/2+1];
        
        for(int i=0;i<=N;i++){
            dp[i][0]=true;
        }
        for(int j=1;j<=sum/2;j++){
            dp[0][j]=false;
        }
        for(int i=1;i<=N;i++){
            for(int j=1;j<=sum/2;j++){
                // if(i==0 || j==0){
                //     dp[i][j]=false;
                // }
                 if(arr[i-1]>j){
                    dp[i][j]=dp[i-1][j];
                }
                else if(arr[i-1]==j){
                    dp[i][j]=true;
                }
                else {
                    dp[i][j]=dp[i-1][j]|| dp[i-1][j-arr[i-1]];
                }
                
                
            }
        }
        return dp[N][sum/2];
    }
    
    
Expected Time Complexity: O(N*sum of elements)
Expected Auxiliary Space: O(N*sum of elements)


bool isSubsetSum(int arr[], int n, int sum)
{
    // Base Cases
    if (sum == 0)
        return true;
    if (n == 0 && sum != 0)
        return false;
 
    // If last element is greater than sum, then
    // ignore it
    if (arr[n - 1] > sum)
        return isSubsetSum(arr, n - 1, sum);
 
    /* else, check if sum can be obtained by any of
        the following
        (a) including the last element
        (b) excluding the last element
    */
    return isSubsetSum(arr, n - 1, sum)
           || isSubsetSum(arr, n - 1, sum - arr[n - 1]);
}


Time Complexity: O(2^n) In the worst case, this solution tries two possibilities (whether to include or exclude) for every element.

recursion+memoisation
-------------------

int dp[201][201];
    int  f(int i,int j,string& pattern ,string &text){
        
        
        if(i<0 && j<0){
            return true;
            
        }
        if(i<0 && j>=0){
            return false;
        }
        if(i>=0 && j<0){
            
            for(int ii=0;ii<i;ii++){
                if(pattern[ii]!='*'){
                    return false;
                }
            }
            return true;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        
        if(pattern[i]==text[j] || pattern[i]=='?'){
            
            return dp[i][j]=f(i-1,j-1,pattern,text);
            
        }
        else if(pattern[i]=='*'){
            return dp[i][j]=f(i-1,j,pattern,text) || f(i,j-1,pattern,text);;
            
        }
        else{
         dp[i][j]=false;
        }
    }
    int wildCard(string pattern,string str)
    {
        int n=pattern.size();
        int m=str.size();
        memset(dp,-1,sizeof(dp));
        
        
        
        return f(n-1,m-1,pattern,str);
        
        
        
        
    }
    
    
    T.C->O(n*m)
    S.C->O(n*m)
    
    
    
    int wildCard(string pattern,string str)
    {
        int n=pattern.size();
        int m=str.size();
        int dp[n+1][m+1];
        memset(dp,-1,sizeof(dp));
        
        dp[0][0]=true;
        for(int j=1;j<=m;j++){
            dp[0][j]=false;
        }
        for(int i=1;i<=n;i++){
            bool flag=true;
            for(int ii=1;ii<=i;ii++){
                if(pattern[ii-1]!='*'){
                   flag= false;
                   break;
                }
            }
            dp[i][0]=flag;
            
        }
        
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                
                if(pattern[i-1]==str[j-1] || pattern[i-1]=='?'){
            
             dp[i][j]=dp[i-1][j-1];
            
        }
        else if(pattern[i-1]=='*'){
         dp[i][j]=(dp[i-1][j] | dp[i][j-1]);
            
        }
        else{
         dp[i][j]=false;
        }
            }
        }
        
        return dp[n][m];
        
        
        
        
    }
    
    T.C->O(n*m)
    
    S.C->O(n*m)
    
    space optimised
    -----------------------
    
     int wildCard(string pattern,string str)
    {
        int n=pattern.size();
        int m=str.size();
       
        
        vector<int>prev(m+1,false);
        vector<int>curr(m+1,false);
        prev[0]=true;
        for(int j=1;j<=m;j++){
           prev[j]=false;
        }
       
        
        
        for(int i=1;i<=n;i++){
            
           
            bool flag=true;
            for(int ii=1;ii<=i;ii++){
                if(pattern[ii-1]!='*'){
                   flag= false;
                   break;
                }
            }
           
           
        curr[0]=flag;
            
       
        
        
            for(int j=1;j<=m;j++){
                
                if(pattern[i-1]==str[j-1] || pattern[i-1]=='?'){
            
             curr[j]=prev[j-1];
            
        }
        else if(pattern[i-1]=='*'){
        curr[j]=(prev[j] | curr[j-1]);
            
        }
        else{
        curr[j]=false;
        }
            }
            prev=curr;
        }
        
        return prev[m];
        
        
        
        
    }
    
    T.C->O(n*m)
    S.C ->O(2*m)
    
    
    

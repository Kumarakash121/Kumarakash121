 Naive Solution – A simple solution is to traverse each element and check if there’s another number in the array which can be added to it to give sum. 
 
 
 int getPairsCount(int arr[], int n, int k) {
        // code here
        int cnt=0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(arr[i]+arr[j]==k){
                    cnt++;
                }
            }
        }
        return cnt;
    }
    
Time Complexity: O(n2) 
Auxiliary Space: O(1)



Create a map to store frequency of each number in the array. (Single traversal is required)
In the next traversal, for every element check if it can be combined with any other element (other than itself!) to give the desired sum. Increment the counter accordingly.
After completion of second traversal, we’d have twice the required value stored in counter because every pair is counted two times. Hence divide count by 2 and return.



int getPairsCount(int arr[], int n, int k) {
        // code here
        int cnt=0;
        
        
        unordered_map<int,int>m;
        for(int i=0;i<n;i++){
            m[arr[i]]++;
        }
        
        for(int i=0;i<n;i++){
            
            
                cnt+=m[k-arr[i]];
                if(k-arr[i]==arr[i]){
                    cnt--;
                }
            
            
        }
        return cnt/2;
    }
    
    
    
    
    int getPairsCount(int arr[], int n, int k) {
        // code here
        int cnt=0;
        
        
        unordered_map<int,int>m;
        // for(int i=0;i<n;i++){
        //     m[arr[i]]++;
        // }
        
        for(int i=0;i<n;i++){
            
            if(m.find(k-arr[i])!=m.end()){
                cnt+=m[k-arr[i]];
            }
            m[arr[i]]++;
            
        }
        return cnt;
    }
    
    
    
Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)



    

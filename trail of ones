int numberOfConsecutiveOnes(int N){
        // code here 
        
        int one=1;
        int zero=1;
        int sum=one+zero;
        
        int i=2;
        while(i<=N){
            one=zero;
            zero=sum;
            sum=zero+one;
            i++;
        }
        return (1<<N)-sum;
    }
    
    
    
    dry run
    
   n=1        
   
   two ans
   0 and 1
   
   n=2
   00(0+0) 10(1+0) 01 (0+1)
   
   n=3
  similarly
  This problem can be solved using Dynamic Programming. Let a[i] be the number of binary strings of length i which do not contain any two consecutive 1’s and which end in 0. Similarly, let b[i] be the number of such strings which end in 1. We can append either 0 or 1 to a string ending in 0, but we can only append 0 to a string ending in 1. This yields the recurrence relation: 

a[i] = a[i - 1] + b[i - 1]
b[i] = a[i - 1] 
The base cases of above recurrence are a[1] = b[1] = 1. The total number of strings of length i is just a[i] + b[i].
Following is the implementation of above solution. In the following implementation, indexes start from 0. So a[i] represents the number of binary strings for input length i+1. Similarly, b[i] represents binary strings for input length i+1.
this find the 
Compute the number of binary strings without consecutive 1’s using the approach discussed here. Let this count be c.
Count of all possible binary strings of length n is 2^n.
Total binary strings with consecutive 1 is 2^n – c.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

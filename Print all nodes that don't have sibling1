Print all nodes that don't have sibling
EasyAccuracy: 20.96%Submissions: 100k+Points: 2
Lamp
Geek Week 2022 is LIVE! Click Here to View All the Exciting Offers!  

Given a Binary Tree of size N, find all the nodes which don't have any sibling. You need to return a list of integers containing all the nodes that don't have a sibling in sorted order.

Note: Root node can not have a sibling so it cannot be included in our answer.

Example 1:

Input :
       37
      /   
    20
    /     
  113 

Output: 20 113
Explanation: 20 and 113 dont have any siblings.

Example 2:

Input :
       1
      / \
     2   3 

Output: -1
Explanation: Every node has a sibling.


void sibling(Node* node,vector<int>&v){
    
    if(!node){
        return;
    }
    if(node->left && !node->right){
        v.push_back(node->left->data);
    }
    if(node->right && !node->left){
        v.push_back(node->right->data);
    }
    
    sibling(node->left,v);
    sibling(node->right,v);
}
vector<int> noSibling(Node* node)
{
    // code here
    vector<int>v;
    sibling(node,v);
    if(v.size()==0){
        return {-1};
    }
    sort(v.begin(),v.end());
    return v;
}


Expected Time Complexity: O(NlogN)
Expected Auxiliary Space: O(Height of the tree)

Node* solve(Node* head1,Node* head2){
    Node* curr=head1;
    Node* next1=curr->next;
    Node*curr2=head2;
    Node*next2=NULL;
    
    while(next1!=NULL && curr2!=NULL){
        
        
        if(curr2->data>=curr->data && curr2->data<=next1->data){
            
            curr->next=curr2;
            next2=curr2->next;
            curr2->next=next1;
            curr=curr2;
            curr2=next2;
        }
        else{
            curr=curr->next;
            next1=curr->next;
            if(next1==NULL){
                curr->next=curr2;
                return head1;
            }
        }
    }
    if(next1==NULL){
                curr->next=curr2;
                return head1;
            }
    return head1;
}
Node* sortedMerge(Node* head1, Node* head2)  
{  
    // code here
    
    if(head1==NULL){
        return head2;
        
    }
    if(head2==NULL){
        return head1;
    }
    
    if(head1->data<=head2->data){
        return solve(head1,head2);
        
    }
    else{
       return solve(head2,head1);
    }
}  


Expected Time Complexity : O(n+m)
Expected Auxilliary Space : O(1)


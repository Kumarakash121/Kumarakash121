bool issubset(vector<int>arr,int sum,int n){
    
    
    // if(sum==0){
    //         return true;
    //     }
    //     if(n==0){
    //         return false;
    //     }
        
    //     if(arr[n-1]>sum){
    //         return issubset(arr,sum,n-1);
    //     }
        
    //     return issubset(arr,sum,n-1) || issubset(arr,sum-arr[n-1],n-1);
    bool dp[n+1][sum+1];
    for(int i=0;i<sum+1;i++){
        dp[0][i]=false;
    }
    for(int j=0;j<n+1;j++){
        dp[j][0]=true;
    }
    
    for(int i=1;i<n+1;i++){
        for(int j=1;j<sum+1;j++){
            
            
            if(j<arr[i-1]){
                dp[i][j]=dp[i-1][j];
            }
            else{
                dp[i][j]=dp[i-1][j]|| dp[i-1][j-arr[i-1]];
            }
        }
    }
    return dp[n][sum];
     }
    // int dp[1001][10001];

    bool isSubsetSum(vector<int>arr, int sum){
        // code here 
        // for(int i=0;i<arr.size()+1;i++){
        //     for(int j=0;j<sum+1;j++){
        //         dp[i][j]=false;
        //     }
        // }
        bool ans= issubset(arr,sum,arr.size());
        return ans;
    }
    
    
    Expected Time Complexity: O(sum*N)
Expected Auxiliary Space: O(sum*N)





Kth distance
EasyAccuracy: 33.03%Submissions: 1050Points: 2
Given an unsorted array Arr of size N that may contain duplicates. Also given a number K which is smaller than size of array. Find if array contains duplicates
within K distance.

Example 1:

Input: 
K = 3, N = 8
Arr[] = {1, 2, 3, 4, 1, 2, 3, 4}
Output: False
Explanation: 
All duplicates are more than k distance
away.
I-
make pair of element and index
and then sort them according to first element in pair
and then if first element of pair matches and difference between second element of pair is less than k
then return true;
after processsing all elements return false;

II-
if element come forst time them map element with its index
and if this element occuring again then calculate difference between index and previos store index if it is less than k
then return true
else map the new index with the element
in the end return false;

bool checkDuplicatesWithinK(int arr[], int n, int k) {
	    // code here
	    
	    vector<pair<int,int>>v;
	    
	    for(int i=0;i<n;i++){
	        v.push_back({arr[i],i});
	        
	    }
	    sort(v.begin(),v.end());
	    
	    for(int i=0;i<n-1;i++){
	        
	        if(v[i].first==v[i+1].first && (v[i+1].second-v[i].second)<=k){
	            return true;
	        }
	    }
	    return false;
	}
  
  
  
  
  
 
 
 bool checkDuplicatesWithinK(int arr[], int n, int k) {
	    // code here
	    


unordered_map<int,int>m;
int min_dis=0;
for(int i=0;i<n;i++){
    if(m.find(arr[i])==m.end()){
        m[arr[i]]=i;
    }
    else if((i-m[arr[i]])<=k){
        return true;
    }
    else{
        m[arr[i]]=i;
    }
}
return false;
}


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

 vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        //Your code here
        //return vector with correct order of elements
        int i=0;
        int j=0;
        vector<int>v;
        while(i<n && j<m){
            if(arr1[i]==arr2[j]){
                if(v.size()>0 && v[v.size()-1]!=arr1[i]){
                    v.push_back(arr1[i]);
                    
                }
                if(v.size()==0){
                   v.push_back(arr1[i]);
                }
                i++;
                j++;
            }
            else if(arr1[i]>arr2[j]){
                 if(v.size()>0 && v[v.size()-1]!=arr2[j]){
                    v.push_back(arr2[j]);
                    
                }
                if(v.size()==0){
                    v.push_back(arr2[j]);
                }
                j++;
            }
            else if(arr1[i]<arr2[j]){
                 if(v.size()>0 && v[v.size()-1]!=arr1[i]){
                    v.push_back(arr1[i]);
                    
                }
                if(v.size()==0){
                    v.push_back(arr1[i]);
                }
                i++;
            }
            
        }
        while(i<n){
            if( v[v.size()-1]!=arr1[i]){
                    v.push_back(arr1[i]);
                    
                }
                i++;
        }
        while(j<m){
            if( v[v.size()-1]!=arr2[j]){
                    v.push_back(arr2[j]);
                    
                }
                j++;
        }
        return v;
    }
    
    
    
    Expected Time Complexity: O(n+m).
Expected Auxiliary Space: O(n+m).

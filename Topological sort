	using dfs---------------------------------------------------------------------------------------------------------------------------------------------------------
  
  void dfs(vector<int>adj[],int node,vector<int>&vis,vector<int>&v){
	    
	    
	    vis[node]=1;
	    
	    for(auto x:adj[node]){
	        if(!vis[x]){
	            dfs(adj,x,vis,v);
	        }
	    }
	    v.push_back(node);
	    
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    
	    vector<int>vis(V);
	    vector<int>v;
	    stack<int>s;
	    for(int i=0;i<V;i++){
	        vis[i]=0;
	    }
	    
	    for(int i=0;i<V;i++){
	        if(!vis[i]){
	            dfs(adj,i,vis,v);
	        }
	    }
	    
	   // while(!s.empty()){
	   //     v.push_back(s.top());
	   //     s.pop();
	   // }
	   reverse(v.begin(),v.end());
	    return v;
	}
  Expected Time Complexity: O(V + E).
Expected Auxiliary Space: O(V).


  
  
  using kahn's algorithm (BFS)--------------------------------------------------------------------------------------------------------------------------------
  
  vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int>indegree(V);
	    queue<int>q;
	    vector<int>ans;
	 for(int i=0;i<V;i++){
	     for(auto x:adj[i]){
	         indegree[x]++;
	     }
	 }
	   for(int i=0;i<V;i++){
	       if(indegree[i]==0){
	           q.push(i);
	       }
	   }
	   while(!q.empty()){
	       int node=q.front();
	       q.pop();
	       
	       ans.push_back(node);
	       for(auto x:adj[node]){
	           indegree[x]--;
	           if(indegree[x]==0){
	               q.push(x);
	           }
	       }
	   }
	   return ans;
	}
  
  Expected Time Complexity: O(V + E).
Expected Auxiliary Space: O(V).


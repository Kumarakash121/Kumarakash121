 recursion 
 tc-O(2^n)
 sc-O(n)
 
 
 
 int lcs1(int x,int y,string s1,string s2){
        
        if(x==0 || y==0){
            return 0;
        }
       
        if(s1[x-1]==s2[y-1]){
            return 1+lcs1(x-1,y-1,s1,s2);
            
        }
        
        return max(lcs1(x-1,y,s1,s2),lcs1(x,y-1,s1,s2));
        
    }
    int lcs(int x, int y, string s1, string s2)
    {
        // your code here
        
        
      return lcs1( x,y,s1,s2);
    }
    
 
 
 
 
 
 
 recursion+memoisation bottom up
 
 tc -O(N2)
 SC-O(N*M)
 
 
 int dp[1001][1001];
    //  memset(dp,-1,sizeof(dp)*1000*1000);
    
    int lcs1(int x,int y,string s1,string s2){
        
        if(x==0 || y==0){
            return 0;
        }
        if(dp[x][y]!=-1){
            return dp[x][y];
        }
        if(s1[x-1]==s2[y-1]){
            return dp[x][y]=1+lcs1(x-1,y-1,s1,s2);
            
        }
        
        return dp[x][y] =max(lcs1(x-1,y,s1,s2),lcs1(x,y-1,s1,s2));
        
    }
    int lcs(int x, int y, string s1, string s2)
    {
        // your code here
        
        memset(dp,-1,sizeof(dp));
      return lcs1( x,y,s1,s2);
    }
    
    
    
    
    
    
    
    top down approach (efficient);
    Expected Time Complexity : O(|str1|*|str2|)
Expected Auxiliary Space: O(|str1|*|str2|)



      int dp[1001][1001];
    //  memset(dp,-1,sizeof(dp)*1000*1000);
    
    int lcs1(int x,int y,string s1,string s2){
        
       
        for(int i=0;i<x+1;i++){
            for(int j=0;j<y+1;j++){
                if(i==0 ||j==0){
                    dp[i][j]=0;
                }
            }
        }
        
        for(int i=1;i<x+1;i++){
            for(int j=1;j<y+1;j++){
               if(s1[i-1]==s2[j-1]){
                   dp[i][j]=1+dp[i-1][j-1];
               }
               else{
                   dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
               }
            }
        }
        return dp[x][y];
    }
    int lcs(int x, int y, string s1, string s2)
    {
        // your code here
        
        memset(dp,-1,sizeof(dp));
      return lcs1( x,y,s1,s2);
    }
